{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.18\"},\"sources\":{\"contracts/MultiSigWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n\\r\\ncontract MultiSigWallet is ReentrancyGuard {\\r\\n    address[] public owners;\\r\\n    mapping(address => bool) public isOwner;\\r\\n    uint public immutable  requiredSignatures;\\r\\n\\r\\n    struct Transaction {\\r\\n        address to;\\r\\n        uint value;\\r\\n        bytes data;\\r\\n        bool executed;\\r\\n        uint approvalCount;\\r\\n    }\\r\\n\\r\\n    Transaction[] public transactions;\\r\\n    mapping(uint => mapping(address => bool)) public approvals;\\r\\n\\r\\n    // Events\\r\\n    event Deposit(address indexed sender, uint amount);\\r\\n    event TransactionProposed(uint transactionId, address indexed to, uint value, bytes data);\\r\\n    event TransactionApproved(uint transactionId, address indexed owner);\\r\\n    event TransactionExecuted(uint transactionId, address indexed to, uint value, bytes data);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner[msg.sender], \\\"Not an owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier transactionExists(uint transactionId) {\\r\\n        require(transactionId < transactions.length, \\\"Transaction does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier notExecuted(uint transactionId) {\\r\\n        require(!transactions[transactionId].executed, \\\"Transaction already executed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier notApproved(uint transactionId) {\\r\\n        require(!approvals[transactionId][msg.sender], \\\"Transaction already approved by this owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Constructor to initialize the wallet with owners and required signatures\\r\\n    constructor(address[] memory _owners, uint _requiredSignatures) payable  {\\r\\n        require(_owners.length >= _requiredSignatures, \\\"Owners less than required signatures\\\");\\r\\n        require(_requiredSignatures > 0, \\\"Require at least one signature\\\");\\r\\n\\r\\n        for (uint i = 0; i < _owners.length; i++) {\\r\\n            address owner = _owners[i];\\r\\n            require(owner != address(0), \\\"Owner cannot be zero address\\\");\\r\\n            require(!isOwner[owner], \\\"Owner already exists\\\");\\r\\n\\r\\n            isOwner[owner] = true;\\r\\n            owners.push(owner);\\r\\n        }\\r\\n\\r\\n        requiredSignatures = _requiredSignatures;\\r\\n    }\\r\\n\\r\\n    // Deposit Ether into the wallet\\r\\n    receive() external payable {\\r\\n        emit Deposit(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    // Propose a new transaction\\r\\n    function proposeTransaction(address to, uint value, bytes memory data) external onlyOwner {\\r\\n        uint transactionId = transactions.length;\\r\\n        transactions.push(Transaction({\\r\\n            to: to,\\r\\n            value: value,\\r\\n            data: data,\\r\\n            executed: false,\\r\\n            approvalCount: 0\\r\\n        }));\\r\\n\\r\\n        emit TransactionProposed(transactionId, to, value, data);\\r\\n    }\\r\\n\\r\\n    // Approve a transaction\\r\\n    function approveTransaction(uint transactionId) external onlyOwner \\r\\n        transactionExists(transactionId) notExecuted(transactionId) notApproved(transactionId) \\r\\n    {\\r\\n        Transaction storage txn = transactions[transactionId];\\r\\n        txn.approvalCount++;\\r\\n\\r\\n        approvals[transactionId][msg.sender] = true;\\r\\n        emit TransactionApproved(transactionId, msg.sender);\\r\\n    }\\r\\n\\r\\n    // Execute a transaction\\r\\n    // slither-disable-next-line reentrancy-no-eth\\r\\n    function executeTransaction(uint transactionId) external onlyOwner \\r\\n        transactionExists(transactionId) notExecuted(transactionId) nonReentrant  \\r\\n    {\\r\\n        Transaction storage txn = transactions[transactionId];\\r\\n        require(txn.approvalCount >= requiredSignatures, \\\"Not enough approvals\\\");\\r\\n\\r\\n        txn.executed = true;\\r\\n        (bool success, ) = txn.to.call{value: txn.value}(txn.data);\\r\\n        require(success, \\\"Transaction failed\\\");\\r\\n\\r\\n        emit TransactionExecuted(transactionId, txn.to, txn.value, txn.data);\\r\\n    }\\r\\n\\r\\n    // Get the number of owners\\r\\n    function getOwnersCount() external view returns (uint) {\\r\\n        return owners.length;\\r\\n    }\\r\\n\\r\\n    // Get details of a transaction\\r\\n    function getTransactionDetails(uint transactionId) external view returns (address to, uint value, bytes memory data, bool executed, uint approvalCount) {\\r\\n        Transaction storage txn = transactions[transactionId];\\r\\n        return (txn.to, txn.value, txn.data, txn.executed, txn.approvalCount);\\r\\n    }\\r\\n\\r\\n    // Get list of owners\\r\\n    function getOwners() external view returns (address[] memory) {\\r\\n        return owners;\\r\\n    }\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x183ABD4e2C1aEB2840000C47aeAfA09f2a941587","bytecode":"0x60a0604052604051620014e0380380620014e0833981016040819052620000269162000291565b600160005581518111156200008e5760405162461bcd60e51b8152602060048201526024808201527f4f776e657273206c657373207468616e207265717569726564207369676e61746044820152637572657360e01b60648201526084015b60405180910390fd5b60008111620000e05760405162461bcd60e51b815260206004820152601e60248201527f52657175697265206174206c65617374206f6e65207369676e61747572650000604482015260640162000085565b60005b8251811015620002535760008382815181106200010457620001046200036b565b6020026020010151905060006001600160a01b0316816001600160a01b031603620001725760405162461bcd60e51b815260206004820152601c60248201527f4f776e65722063616e6e6f74206265207a65726f206164647265737300000000604482015260640162000085565b6001600160a01b03811660009081526002602052604090205460ff1615620001dd5760405162461bcd60e51b815260206004820152601460248201527f4f776e657220616c726561647920657869737473000000000000000000000000604482015260640162000085565b6001600160a01b03166000818152600260205260408120805460ff191660019081179091558054808201825591527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319169091179055806200024a8162000381565b915050620000e3565b5060805250620003a9565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200028c57600080fd5b919050565b60008060408385031215620002a557600080fd5b82516001600160401b0380821115620002bd57600080fd5b818501915085601f830112620002d257600080fd5b8151602082821115620002e957620002e96200025e565b8160051b604051601f19603f830116810181811086821117156200031157620003116200025e565b6040529283528183019350848101820192898411156200033057600080fd5b948201945b838610156200035957620003498662000274565b8552948201949382019362000335565b97909101519698969750505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620003a257634e487b7160e01b600052601160045260246000fd5b5060010190565b608051611114620003cc6000396000818161020201526109e601526111146000f3fe6080604052600436106100a05760003560e01c806373ff81cc1161006457806373ff81cc146101d15780638d068043146101f05780639ace38c214610224578063a0e67e2b14610244578063ab2850da14610266578063ee22610b146102a157600080fd5b8063025e7c27146100e15780630fa683d31461011e578063242232d11461014f5780632f54bf6e146101715780635e90852d146101b157600080fd5b366100dc5760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2005b600080fd5b3480156100ed57600080fd5b506101016100fc366004610bc9565b6102c1565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561012a57600080fd5b5061013e610139366004610bc9565b6102eb565b604051610115959493929190610c28565b34801561015b57600080fd5b5061016f61016a366004610bc9565b6103e6565b005b34801561017d57600080fd5b506101a161018c366004610c7f565b60026020526000908152604090205460ff1681565b6040519015158152602001610115565b3480156101bd57600080fd5b5061016f6101cc366004610cb7565b610604565b3480156101dd57600080fd5b506001545b604051908152602001610115565b3480156101fc57600080fd5b506101e27f000000000000000000000000000000000000000000000000000000000000000081565b34801561023057600080fd5b5061013e61023f366004610bc9565b610782565b34801561025057600080fd5b5061025961085b565b6040516101159190610d82565b34801561027257600080fd5b506101a1610281366004610dcf565b600460209081526000928352604080842090915290825290205460ff1681565b3480156102ad57600080fd5b5061016f6102bc366004610bc9565b6108bd565b600181815481106102d157600080fd5b6000918252602090912001546001600160a01b0316905081565b600080606060008060006003878154811061030857610308610dfb565b6000918252602090912060059091020180546001820154600383015460048401546002850180549596506001600160a01b039094169492939260ff90921691839061035290610e11565b80601f016020809104026020016040519081016040528092919081815260200182805461037e90610e11565b80156103cb5780601f106103a0576101008083540402835291602001916103cb565b820191906000526020600020905b8154815290600101906020018083116103ae57829003601f168201915b50505050509250955095509550955095505091939590929450565b3360009081526002602052604090205460ff1661041e5760405162461bcd60e51b815260040161041590610e4b565b60405180910390fd5b600354819081106104715760405162461bcd60e51b815260206004820152601a60248201527f5472616e73616374696f6e20646f6573206e6f742065786973740000000000006044820152606401610415565b816003818154811061048557610485610dfb565b600091825260209091206003600590920201015460ff16156104e95760405162461bcd60e51b815260206004820152601c60248201527f5472616e73616374696f6e20616c7265616479206578656375746564000000006044820152606401610415565b6000838152600460209081526040808320338452909152902054839060ff16156105685760405162461bcd60e51b815260206004820152602a60248201527f5472616e73616374696f6e20616c726561647920617070726f766564206279206044820152693a3434b99037bbb732b960b11b6064820152608401610415565b60006003858154811061057d5761057d610dfb565b906000526020600020906005020190508060040160008154809291906105a290610e71565b909155505060008581526004602090815260408083203380855290835292819020805460ff19166001179055518781527f924813d717e221b5f46dcd8a56da1679e4612584ab3237d55e5faabf6f6a3079910160405180910390a25050505050565b3360009081526002602052604090205460ff166106335760405162461bcd60e51b815260040161041590610e4b565b600380546040805160a0810182526001600160a01b03878116825260208201878152928201868152600060608401819052608084018190526001860187559590955281517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b6005860290810180546001600160a01b0319169290931691909117825592517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c84015593519293909290917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d01906107109082610ee6565b50606082015160038201805460ff19169115159190911790556080909101516004909101556040516001600160a01b038516907f561275eec320a77ef0e4076251bf2ba80573d7b921ecd629f83ea2ee47c9cdfe9061077490849087908790610fa6565b60405180910390a250505050565b6003818154811061079257600080fd5b60009182526020909120600590910201805460018201546002830180546001600160a01b0390931694509092916107c890610e11565b80601f01602080910402602001604051908101604052809291908181526020018280546107f490610e11565b80156108415780601f1061081657610100808354040283529160200191610841565b820191906000526020600020905b81548152906001019060200180831161082457829003601f168201915b505050506003830154600490930154919260ff1691905085565b606060018054806020026020016040519081016040528092919081815260200182805480156108b357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610895575b5050505050905090565b3360009081526002602052604090205460ff166108ec5760405162461bcd60e51b815260040161041590610e4b565b6003548190811061093f5760405162461bcd60e51b815260206004820152601a60248201527f5472616e73616374696f6e20646f6573206e6f742065786973740000000000006044820152606401610415565b816003818154811061095357610953610dfb565b600091825260209091206003600590920201015460ff16156109b75760405162461bcd60e51b815260206004820152601c60248201527f5472616e73616374696f6e20616c7265616479206578656375746564000000006044820152606401610415565b6109bf610b70565b6000600384815481106109d4576109d4610dfb565b906000526020600020906005020190507f000000000000000000000000000000000000000000000000000000000000000081600401541015610a4f5760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f75676820617070726f76616c7360601b6044820152606401610415565b60038101805460ff191660019081179091558154908201546040516000926001600160a01b03169190610a86906002860190610fce565b60006040518083038185875af1925050503d8060008114610ac3576040519150601f19603f3d011682016040523d82523d6000602084013e610ac8565b606091505b5050905080610b0e5760405162461bcd60e51b8152602060048201526012602482015271151c985b9cd858dd1a5bdb8819985a5b195960721b6044820152606401610415565b815460018301546040516001600160a01b03909216917f45c6e1a61292af28e0360dcf7b4c16a9143c6a4e968a38ecd0fd26cac72e06ca91610b57918991906002880190611044565b60405180910390a25050610b6b6001600055565b505050565b600260005403610bc25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610415565b6002600055565b600060208284031215610bdb57600080fd5b5035919050565b6000815180845260005b81811015610c0857602081850181015186830182015201610bec565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b038616815284602082015260a060408201526000610c4f60a0830186610be2565b931515606083015250608001529392505050565b80356001600160a01b0381168114610c7a57600080fd5b919050565b600060208284031215610c9157600080fd5b610c9a82610c63565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215610ccc57600080fd5b610cd584610c63565b925060208401359150604084013567ffffffffffffffff80821115610cf957600080fd5b818601915086601f830112610d0d57600080fd5b813581811115610d1f57610d1f610ca1565b604051601f8201601f19908116603f01168101908382118183101715610d4757610d47610ca1565b81604052828152896020848701011115610d6057600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6020808252825182820181905260009190848201906040850190845b81811015610dc35783516001600160a01b031683529284019291840191600101610d9e565b50909695505050505050565b60008060408385031215610de257600080fd5b82359150610df260208401610c63565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610e2557607f821691505b602082108103610e4557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b2737ba1030b71037bbb732b960a11b604082015260600190565b600060018201610e9157634e487b7160e01b600052601160045260246000fd5b5060010190565b601f821115610b6b57600081815260208120601f850160051c81016020861015610ebf5750805b601f850160051c820191505b81811015610ede57828155600101610ecb565b505050505050565b815167ffffffffffffffff811115610f0057610f00610ca1565b610f1481610f0e8454610e11565b84610e98565b602080601f831160018114610f495760008415610f315750858301515b600019600386901b1c1916600185901b178555610ede565b600085815260208120601f198616915b82811015610f7857888601518255948401946001909101908401610f59565b5085821015610f965787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b838152826020820152606060408201526000610fc56060830184610be2565b95945050505050565b6000808354610fdc81610e11565b60018281168015610ff4576001811461100957611038565b60ff1984168752821515830287019450611038565b8760005260208060002060005b8581101561102f5781548a820152908401908201611016565b50505082870194505b50929695505050505050565b838152600060208481840152606060408401526000845461106481610e11565b806060870152608060018084166000811461108657600181146110a0576110ce565b60ff1985168984015283151560051b8901830195506110ce565b896000528660002060005b858110156110c65781548b82018601529083019088016110ab565b8a0184019650505b50939a995050505050505050505056fea26469706673582212209dbdfc647ee2d32ca86c0574e480116b19c689159ee6bdd14e2676a80e2dcab664736f6c63430008120033","deployedBytecode":"0x6080604052600436106100a05760003560e01c806373ff81cc1161006457806373ff81cc146101d15780638d068043146101f05780639ace38c214610224578063a0e67e2b14610244578063ab2850da14610266578063ee22610b146102a157600080fd5b8063025e7c27146100e15780630fa683d31461011e578063242232d11461014f5780632f54bf6e146101715780635e90852d146101b157600080fd5b366100dc5760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2005b600080fd5b3480156100ed57600080fd5b506101016100fc366004610bc9565b6102c1565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561012a57600080fd5b5061013e610139366004610bc9565b6102eb565b604051610115959493929190610c28565b34801561015b57600080fd5b5061016f61016a366004610bc9565b6103e6565b005b34801561017d57600080fd5b506101a161018c366004610c7f565b60026020526000908152604090205460ff1681565b6040519015158152602001610115565b3480156101bd57600080fd5b5061016f6101cc366004610cb7565b610604565b3480156101dd57600080fd5b506001545b604051908152602001610115565b3480156101fc57600080fd5b506101e27f000000000000000000000000000000000000000000000000000000000000000081565b34801561023057600080fd5b5061013e61023f366004610bc9565b610782565b34801561025057600080fd5b5061025961085b565b6040516101159190610d82565b34801561027257600080fd5b506101a1610281366004610dcf565b600460209081526000928352604080842090915290825290205460ff1681565b3480156102ad57600080fd5b5061016f6102bc366004610bc9565b6108bd565b600181815481106102d157600080fd5b6000918252602090912001546001600160a01b0316905081565b600080606060008060006003878154811061030857610308610dfb565b6000918252602090912060059091020180546001820154600383015460048401546002850180549596506001600160a01b039094169492939260ff90921691839061035290610e11565b80601f016020809104026020016040519081016040528092919081815260200182805461037e90610e11565b80156103cb5780601f106103a0576101008083540402835291602001916103cb565b820191906000526020600020905b8154815290600101906020018083116103ae57829003601f168201915b50505050509250955095509550955095505091939590929450565b3360009081526002602052604090205460ff1661041e5760405162461bcd60e51b815260040161041590610e4b565b60405180910390fd5b600354819081106104715760405162461bcd60e51b815260206004820152601a60248201527f5472616e73616374696f6e20646f6573206e6f742065786973740000000000006044820152606401610415565b816003818154811061048557610485610dfb565b600091825260209091206003600590920201015460ff16156104e95760405162461bcd60e51b815260206004820152601c60248201527f5472616e73616374696f6e20616c7265616479206578656375746564000000006044820152606401610415565b6000838152600460209081526040808320338452909152902054839060ff16156105685760405162461bcd60e51b815260206004820152602a60248201527f5472616e73616374696f6e20616c726561647920617070726f766564206279206044820152693a3434b99037bbb732b960b11b6064820152608401610415565b60006003858154811061057d5761057d610dfb565b906000526020600020906005020190508060040160008154809291906105a290610e71565b909155505060008581526004602090815260408083203380855290835292819020805460ff19166001179055518781527f924813d717e221b5f46dcd8a56da1679e4612584ab3237d55e5faabf6f6a3079910160405180910390a25050505050565b3360009081526002602052604090205460ff166106335760405162461bcd60e51b815260040161041590610e4b565b600380546040805160a0810182526001600160a01b03878116825260208201878152928201868152600060608401819052608084018190526001860187559590955281517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b6005860290810180546001600160a01b0319169290931691909117825592517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c84015593519293909290917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d01906107109082610ee6565b50606082015160038201805460ff19169115159190911790556080909101516004909101556040516001600160a01b038516907f561275eec320a77ef0e4076251bf2ba80573d7b921ecd629f83ea2ee47c9cdfe9061077490849087908790610fa6565b60405180910390a250505050565b6003818154811061079257600080fd5b60009182526020909120600590910201805460018201546002830180546001600160a01b0390931694509092916107c890610e11565b80601f01602080910402602001604051908101604052809291908181526020018280546107f490610e11565b80156108415780601f1061081657610100808354040283529160200191610841565b820191906000526020600020905b81548152906001019060200180831161082457829003601f168201915b505050506003830154600490930154919260ff1691905085565b606060018054806020026020016040519081016040528092919081815260200182805480156108b357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610895575b5050505050905090565b3360009081526002602052604090205460ff166108ec5760405162461bcd60e51b815260040161041590610e4b565b6003548190811061093f5760405162461bcd60e51b815260206004820152601a60248201527f5472616e73616374696f6e20646f6573206e6f742065786973740000000000006044820152606401610415565b816003818154811061095357610953610dfb565b600091825260209091206003600590920201015460ff16156109b75760405162461bcd60e51b815260206004820152601c60248201527f5472616e73616374696f6e20616c7265616479206578656375746564000000006044820152606401610415565b6109bf610b70565b6000600384815481106109d4576109d4610dfb565b906000526020600020906005020190507f000000000000000000000000000000000000000000000000000000000000000081600401541015610a4f5760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f75676820617070726f76616c7360601b6044820152606401610415565b60038101805460ff191660019081179091558154908201546040516000926001600160a01b03169190610a86906002860190610fce565b60006040518083038185875af1925050503d8060008114610ac3576040519150601f19603f3d011682016040523d82523d6000602084013e610ac8565b606091505b5050905080610b0e5760405162461bcd60e51b8152602060048201526012602482015271151c985b9cd858dd1a5bdb8819985a5b195960721b6044820152606401610415565b815460018301546040516001600160a01b03909216917f45c6e1a61292af28e0360dcf7b4c16a9143c6a4e968a38ecd0fd26cac72e06ca91610b57918991906002880190611044565b60405180910390a25050610b6b6001600055565b505050565b600260005403610bc25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610415565b6002600055565b600060208284031215610bdb57600080fd5b5035919050565b6000815180845260005b81811015610c0857602081850181015186830182015201610bec565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b038616815284602082015260a060408201526000610c4f60a0830186610be2565b931515606083015250608001529392505050565b80356001600160a01b0381168114610c7a57600080fd5b919050565b600060208284031215610c9157600080fd5b610c9a82610c63565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215610ccc57600080fd5b610cd584610c63565b925060208401359150604084013567ffffffffffffffff80821115610cf957600080fd5b818601915086601f830112610d0d57600080fd5b813581811115610d1f57610d1f610ca1565b604051601f8201601f19908116603f01168101908382118183101715610d4757610d47610ca1565b81604052828152896020848701011115610d6057600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6020808252825182820181905260009190848201906040850190845b81811015610dc35783516001600160a01b031683529284019291840191600101610d9e565b50909695505050505050565b60008060408385031215610de257600080fd5b82359150610df260208401610c63565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610e2557607f821691505b602082108103610e4557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b2737ba1030b71037bbb732b960a11b604082015260600190565b600060018201610e9157634e487b7160e01b600052601160045260246000fd5b5060010190565b601f821115610b6b57600081815260208120601f850160051c81016020861015610ebf5750805b601f850160051c820191505b81811015610ede57828155600101610ecb565b505050505050565b815167ffffffffffffffff811115610f0057610f00610ca1565b610f1481610f0e8454610e11565b84610e98565b602080601f831160018114610f495760008415610f315750858301515b600019600386901b1c1916600185901b178555610ede565b600085815260208120601f198616915b82811015610f7857888601518255948401946001909101908401610f59565b5085821015610f965787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b838152826020820152606060408201526000610fc56060830184610be2565b95945050505050565b6000808354610fdc81610e11565b60018281168015610ff4576001811461100957611038565b60ff1984168752821515830287019450611038565b8760005260208060002060005b8581101561102f5781548a820152908401908201611016565b50505082870194505b50929695505050505050565b838152600060208481840152606060408401526000845461106481610e11565b806060870152608060018084166000811461108657600181146110a0576110ce565b60ff1985168984015283151560051b8901830195506110ce565b896000528660002060005b858110156110c65781548b82018601529083019088016110ab565b8a0184019650505b50939a995050505050505050505056fea26469706673582212209dbdfc647ee2d32ca86c0574e480116b19c689159ee6bdd14e2676a80e2dcab664736f6c63430008120033","abi":[{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256","name":"_requiredSignatures","type":"uint256"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"transactionId","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"TransactionApproved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"transactionId","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"TransactionExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"transactionId","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"TransactionProposed","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"approvals","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"transactionId","type":"uint256"}],"name":"approveTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"transactionId","type":"uint256"}],"name":"executeTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getOwners","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getOwnersCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"transactionId","type":"uint256"}],"name":"getTransactionDetails","outputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bool","name":"executed","type":"bool"},{"internalType":"uint256","name":"approvalCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"owners","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"proposeTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"requiredSignatures","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"transactions","outputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bool","name":"executed","type":"bool"},{"internalType":"uint256","name":"approvalCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}]}